apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "minio.fullname" . }}-post-install-check"
  labels:
    {{- include "minio.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ include "minio.fullname" . }}-post-install-check"
      labels:
        {{- include "minio.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
      - name: minio-check
        image: curlimages/curl:7.86.0
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Waiting for MinIO to initialize..."
            sleep {{ .Values.postInstall.initialDelay | default 10 }}
            
            HOST="{{ .Values.postInstall.host | default (include "minio.fullname" .) }}"
            PORT="{{ .Values.postInstall.port | default .Values.service.apiPort }}"
            ENDPOINT="{{ .Values.postInstall.endpoint | default "/minio/health/live" }}"
            PROTOCOL="{{ .Values.postInstall.protocol | default "http" }}"
            MAX_RETRIES={{ .Values.postInstall.maxRetries | default 30 }}
            RETRY_INTERVAL={{ .Values.postInstall.retryInterval | default 5 }}
            
            echo "Checking MinIO API endpoint: ${PROTOCOL}://${HOST}:${PORT}${ENDPOINT}"
            
            for i in $(seq 1 $MAX_RETRIES); do
              HTTP_CODE=$(curl -k -s -f -o /dev/null -w "%{http_code}" "${PROTOCOL}://${HOST}:${PORT}${ENDPOINT}")
              if [ "$HTTP_CODE" = "200" ]; then
                echo "SUCCESS: MinIO API is ready! (HTTP ${HTTP_CODE})"
                exit 0
              fi
              echo "MinIO API not yet ready (HTTP ${HTTP_CODE}), retrying... ($i/$MAX_RETRIES)"
              sleep $RETRY_INTERVAL
            done
            
            echo "ERROR: MinIO API failed to become ready within timeout period"
            exit 1 